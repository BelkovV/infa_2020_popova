import pygame
from pygame.draw import *
from random import randint
clock = pygame.time.Clock()


pygame.init()


WIDTH = 1200
HEIGHT = 900
screen = pygame.display.set_mode((WIDTH, HEIGHT))

#the number of frames per second
FPS = 20
#the number of balls appearing per second
K = 1.5 
#time between appearing white balls
W_T = 50 

#lifetime of ordinary ball
ball_lifetime = 40 

#lifetime of white ball
white_ball_lifetime = 5 

#maximum speed
ball_speed_max = 200 


#ball's colors

RED = (255, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
GREEN = (0, 255, 0)
MAGENTA = (255, 0, 255)
CYAN = (0, 255, 255)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
COLORS = [RED, BLUE, YELLOW, GREEN, MAGENTA, CYAN]


#ball's speeds

ball_speed_up = 10
ball_speed_max  = 100
ball_speed_x = 10
ball_speed_y = 10


finished = False
balls = []
white_balls = []
timer = 0  
ball_score = 0
white_ball_score = 0


#create ball

def new_ball():
	x = randint(100, WIDTH-200)
	y = randint(100, HEIGHT-200)
	r = randint(40, 90)
	dx = randint(-ball_speed_max, ball_speed_max)
	dy = randint(-ball_speed_max, ball_speed_max)
	color = COLORS[randint(0, 5)]
	return([x, y, r, color, dx, dy])
    balls.append([x, y, r, color, dx, dy, ball_lifetime, click])


def new_white_ball():
	x = randint(100, WIDTH-200)
	y = randint(100, HEIGHT-200)
	r = 3*randint(10, 30)
	return([x, y, r, (255, 255, 255)])
    white_balls.append([x, y, r, color, dx, dy, white_ball_lifetime, click])

def click(event):
    print(x, y, r)
    global result
    if (event.pos[1] - y)**2 + (event.pos[0] - x)**2 <= r**2:
        result += 1
        

pygame.display.update()


while not finished:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            finished = True
        elif event.type == pygame.MOUSEBUTTONDOWN:
            # coordinates of the mouse
            (x_mouse, y_mouse) = event.pos  
            # condition for hitting the ball
            for ball in balls:
                if (ball[0] - x_mouse) ** 2 + (ball[1] - y_mouse) ** 2 <= ball[2] ** 2:
                    ball_score += 1  # counting of score
                    balls.remove(ball)  # disappearance of the shot ball
            for white_ball in white_balls:
                if (white_ball[0] - x_mouse) ** 2 + (white_ball[1] - y_mouse) ** 2 <= white_ball[2] ** 2:
                    ball_score += 5  # counting of score
                    white_ball.remove(white_ball)  # disappearance of the shot ball

    # output of the score on the game display
    f = pygame.font.Font(None, 36)
    text = f.render('Score:' + str(ball_score), 1, (180, 0, 0))
    screen.blit(text, (250, 20))

    # movement of usual balls
    for ball in balls:
        ball[0] += ball[4]
        ball[1] += ball[5]
        # conditions of reflection from the walls
        if (ball[0] + ball[2] > 600) or (ball[0] - ball[2] < 0):
            ball[4] *= -1
        if (ball[1] + ball[2] > 450) or (ball[1] - ball[2] < 0):
            ball[5] *= -1
        # condition for disappearing if the ball is old
        if ball[6] < 150 and not ball[7]:
            new_ball(screen, ball[0], ball[1], ball[2], ball[3])
            ball[7] += 1
        else:
            del ball

    # movement of special white balls
    for white_ball in m_ballwhite_balls:
        white_ball[0] += white_ball[2]
        white_ball[1] += white_ball[3]
        white_ball[3] += 1
        # conditions of reflection from the walls
        if (white_ball[0] > 600) or (white_ball[0] < 0):
            white_ball[2] *= -1
        if (white_ball[1] > 450) or (white_ball[1]  < 0):
            white_ball[3] *= -1
        # condition for disappearing if the ball is old
        if white_ball[4] < 100 and not white_ball[5]:
            white_ball(screen, white_ball[0], white_ball[1])
            white_ball[4] += 1
        else:
            del white_ball
            
            
    # appearance of a new ball
    if timer % 20 == 0:
        click = False
        new_ball()

    # appearance of a new money ball
    if timer % 40 == 0:
        click = False
        new_white_ball()
       

    timer += 1  # counting time of the game
    pygame.display.update()
    clock.tick(FPS)
    screen.fill((0, 0, 0))  # updating the display

    pygame.display.update()
    clock.tick(FPS)
    screen.fill((0, 0, 0))  # updating the display

pygame.quit()
